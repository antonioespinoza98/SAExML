saveRDS(ingreso_region, "ingreso/output/ingreso_region.rds")
mapping <- left_join(
x = mideplan,
y = ingreso_region,
by = join_by(codigo == codigo)
)
View(mapping)
View(ingreso_region)
mapa_plot <- ggplot(
data = mapping,
mapping = aes(
fill = ingreso_medio
)
) +
geom_sf(color = "white") +
labs(fill = "Ingreso medio") +
scale_fill_viridis_c() +
theme_minimal()
rm(mapa_plot)
ggplot(
data = mapping,
mapping = aes(
fill = ingreso_medio
)
) +
geom_sf(color = "white") +
labs(fill = "Ingreso medio") +
scale_fill_viridis_c() +
theme_minimal()
region_plot <- ggplot(
data = mapping,
mapping = aes(
fill = ingreso_medio
)
) +
geom_sf(color = "white") +
labs(fill = "Ingreso medio") +
scale_fill_viridis_c() +
theme_minimal()
ggsave(region_plot, filename = "ingreso/output/mapa_mideplan.png")
rm(list = ls())
encuesta_mrp <- readRDS("ingreso/datos/encuesta_mrp1.rds")
diseno <- encuesta_mrp %>% group_by(dam) %>%
as_survey_design(weights = fep)
media_est_srvyr <- diseno %>%
group_by(dam) %>%
summarise(media_ingreso = mean(ingreso))
censo_mrp <- censo_mrp <- readRDS("ingreso/datos/censo_mrp1.rds")
pred <- readRDS("ingreso/output/pred.rds")
censo_mrp$pred_ingreso <- pred
ingreso_dam <- censo_mrp %>%
group_by(dam) %>%
summarise(
media_ingreso = mean(pred_ingreso)
)
mapping <- rbind(media_est_srvyr, ingreso_dam)
estim <- c(rep("Directo", 6), rep("XGBoost", 6))
mapping <- cbind(mapping, estim)
mapping %>%
ggplot(
aes(x = dam,
y = media_ingreso,
col = estim)
) + geom_point() + theme_classic()
censo_mrp %>%
group_by(dam) %>%
summarise(
n = n()
)
mapping %>%
ggplot(
aes(x = dam,
y = media_ingreso,
col = estim)
) + geom_point() + theme_classic() +
scale_fill_manual(values = c("#008194","#C55A11")) +
labs(x = "Dam", y = "Ingreso medio", fill = "Modelo")
mapping %>%
ggplot(
aes(x = dam,
y = media_ingreso,
col = estim)
) + geom_point() + theme_classic() +
scale_color_manual(values = c("#008194","#C55A11")) +
labs(x = "Dam", y = "Ingreso medio", fill = "Modelo")
mapping %>%
ggplot(
aes(x = dam,
y = media_ingreso,
col = estim)
) + geom_point() + theme_classic() +
scale_color_manual(values = c("red","green")) +
labs(x = "Dam", y = "Ingreso medio", fill = "Modelo")
mapping %>%
ggplot(
aes(x = dam,
y = media_ingreso,
col = estim)
) + geom_point(size = 1) + theme_classic() +
scale_color_manual(values = c("red","green")) +
labs(x = "Dam", y = "Ingreso medio", fill = "Modelo")
mapping %>%
ggplot(
aes(x = dam,
y = media_ingreso,
col = estim)
) + geom_point(size = 2) + theme_classic() +
scale_color_manual(values = c("red","green")) +
labs(x = "Dam", y = "Ingreso medio", fill = "Modelo")
mapping %>%
ggplot(
aes(x = dam,
y = media_ingreso,
col = estim)
) + geom_point(size = 2) + theme_minimal() +
scale_color_manual(values = c("red","green")) +
labs(x = "Dam", y = "Ingreso medio", fill = "Modelo")
plot_validacion <- mapping %>%
ggplot(
aes(x = dam,
y = media_ingreso,
col = estim)
) + geom_point(size = 2) + theme_minimal() +
scale_color_manual(values = c("red","green")) +
labs(x = "Dam", y = "Ingreso medio", fill = "Modelo")
ggsave(plot_validacion, filename = "ingreso/output/validacion.png")
shp = read_sf("ingreso/datos/mideplan_CR.shp")
x <- c('tidyverse','survey','srvyr')
lapply(x, require, character.only = TRUE)
encuesta_mrp <- readRDS("ingreso/datos/encuesta_mrp1.rds") %>%
select(
# -X2016_crops.coverfraction, -X2016_urban.coverfraction,
#      -X2016_gHM, -accessibility, -accessibility_walking_only,
-area1, -sexo2,-edad2,-edad3, -edad4,-edad5,-anoest2,
-anoest3, -anoest4, -discapacidad1,-etnia1,-lp,-li,-pobreza) %>%
mutate_if(is.character, as.factor) %>%
mutate(dam = as.factor(dam))
diseno <- encuesta_mrp  %>%
as_survey_design(weights = ~fep)
diseno <- encuesta_mrp  %>%
as_survey_design(weights = fep)
svyby(
ingreso,
dam,
diseno,
svytotal
)
svyby(
ingreso,
by = dam,
diseno,
svytotal
)
svyby(
ingreso,
by = dam,
design = diseno,
svytotal
)
diseno
svyby(
ingreso,
by = "dam",
design = diseno,
svytotal
)
svyby(
x = "ingreso",
by = "dam",
design = diseno,
svytotal
)
svyby(
x = ingreso,
by = "dam",
design = diseno,
svytotal
)
svyby(
formula = ingreso,
by = "dam",
design = diseno,
svytotal
)
svyby(
formula = "ingreso",
by = "dam",
design = diseno,
svytotal
)
svyby(
ingreso,
by = dam,
design = diseno,
svytotal
)
svyby(
~ingreso,
by = ~dam,
design = diseno,
svytotal
)
options(scipen = 999)
svyby(
~ingreso,
by = ~dam,
design = diseno,
svytotal
)
svyby(
~ingreso,
by = ~dam,
design = diseno,
svymean
)
media_est_srvyr <- svyby(
~ingreso,
by = ~dam,
design = diseno,
svymean
)
censo_mrp <- censo_mrp <- readRDS("ingreso/datos/censo_mrp1.rds") %>%
mutate(
region = recode(dam,
"01" = "Central",
"02" = "Chorotega",
"03" = "Pacífico Central",
"04" = "Brunca",
"05" = "Huetar Caribe",
"06" = "Huetar Norte")) %>%
mutate(region = as.factor(region))
censo_mrp <- censo_mrp <- readRDS("ingreso/datos/censo_mrp1.rds") %>%
mutate(
region = recode(dam,
"01" = "Central",
"02" = "Chorotega",
"03" = "Pacífico Central",
"04" = "Brunca",
"05" = "Huetar Caribe",
"06" = "Huetar Norte")) %>%
mutate(region = as.factor(region))
pred <- readRDS("ingreso/output/pred.rds")
censo_mrp$pred_ingreso <- pred
ingreso_dam <- censo_mrp %>%
group_by(region) %>%
summarise(
media_ingreso = mean(pred_ingreso)
)
colnames(ingreso_dam) <- c("dam", "ingreso")
media_est_srvyr[,-3]
mapping <- rbind(media_est_srvyr[,-3], ingreso_dam)
estim <- c(rep("Directo", 6), rep("XGBoost", 6))
mapping <- cbind(mapping, estim)
mapping %>%
ggplot(
aes(x = Domain,
y = Direct,
col = estim)
) + geom_point(size = 2) + theme_minimal() +
scale_color_manual(values = c("red","green")) +
labs(x = "Dam", y = "Ingreso medio", fill = "Modelo")
mapping
mapping %>%
ggplot(
aes(x = dam,
y = ingreso,
col = estim)
) + geom_point(size = 2) + theme_minimal() +
scale_color_manual(values = c("red","green")) +
labs(x = "Dam", y = "Ingreso medio", fill = "Modelo")
censo_mrp <- censo_mrp <- readRDS("ingreso/datos/censo_mrp1.rds") %>%
#     mutate(
# region = recode(dam,
#              "01" = "Central",
#              "02" = "Chorotega",
#              "03" = "Pacífico Central",
#              "04" = "Brunca",
#              "05" = "Huetar Caribe",
#              "06" = "Huetar Norte")) %>%
mutate(region = as.factor(region))
censo_mrp <- censo_mrp <- readRDS("ingreso/datos/censo_mrp1.rds")
pred <- readRDS("ingreso/output/pred.rds")
censo_mrp$pred_ingreso <- pred
ingreso_dam <- censo_mrp %>%
group_by(region) %>%
summarise(
media_ingreso = mean(pred_ingreso)
)
ingreso_dam <- censo_mrp %>%
group_by(dam) %>%
summarise(
media_ingreso = mean(pred_ingreso)
)
ingreso_dam <- censo_mrp %>%
group_by(dam) %>%
summarise(
ingreso = mean(pred_ingreso)
)
mapping <- rbind(media_est_srvyr[,-3], ingreso_dam)
estim <- c(rep("Directo", 6), rep("XGBoost", 6))
mapping <- cbind(mapping, estim)
mapping %>%
ggplot(
aes(x = dam,
y = ingreso,
col = estim)
) + geom_point(size = 2) + theme_minimal() +
scale_color_manual(values = c("red","green")) +
labs(x = "Dam", y = "Ingreso medio", fill = "Modelo")
rm(list = ls())
encuesta_mrp <- readRDS("ingreso/datos/encuesta_mrp1.rds") %>%
select(
# -X2016_crops.coverfraction, -X2016_urban.coverfraction,
#      -X2016_gHM, -accessibility, -accessibility_walking_only,
-area1, -sexo2,-edad2,-edad3, -edad4,-edad5,-anoest2,
-anoest3, -anoest4, -discapacidad1,-etnia1,-lp,-li,-pobreza) %>%
mutate(
region = recode(dam,
"01" = "Central",
"02" = "Chorotega",
"03" = "Pacífico Central",
"04" = "Brunca",
"05" = "Huetar Caribe",
"06" = "Huetar Norte")) %>%
mutate(region = as.factor(region)) %>%
mutate_if(is.character, as.factor) %>%
mutate(dam = as.factor(dam))
diseno <- encuesta_mrp  %>%
as_survey_design(weights = fep)
media_est_srvyr <- svyby(
~ingreso,
by = ~region,
design = diseno,
svymean
)
censo_mrp <- censo_mrp <- readRDS("ingreso/datos/censo_mrp1.rds") %>%
mutate(
region = recode(dam,
"01" = "Central",
"02" = "Chorotega",
"03" = "Pacífico Central",
"04" = "Brunca",
"05" = "Huetar Caribe",
"06" = "Huetar Norte")) %>%
mutate(region = as.factor(region))
pred <- readRDS("ingreso/output/pred.rds")
censo_mrp$pred_ingreso <- pred
ingreso_dam <- censo_mrp %>%
group_by(dam) %>%
summarise(
ingreso = mean(pred_ingreso)
)
mapping <- rbind(media_est_srvyr[,-3], ingreso_dam)
ingreso_dam <- censo_mrp %>%
group_by(region) %>%
summarise(
ingreso = mean(pred_ingreso)
)
mapping <- rbind(media_est_srvyr[,-3], ingreso_dam)
estim <- c(rep("Directo", 6), rep("XGBoost", 6))
mapping <- cbind(mapping, estim)
plot_validacion <- mapping %>%
ggplot(
aes(x = dam,
y = ingreso,
col = estim)
) + geom_point(size = 2) + theme_minimal() +
scale_color_manual(values = c("red","green")) +
labs(x = "Dam", y = "Ingreso medio", fill = "Modelo")
plot_validacion
plot_validacion <- mapping %>%
ggplot(
aes(x = region,
y = ingreso,
col = estim)
) + geom_point(size = 2) + theme_minimal() +
scale_color_manual(values = c("red","green")) +
labs(x = "Dam", y = "Ingreso medio", fill = "Modelo")
plot_validacion
censo_mrp %>%
group_by(region) %>%
summarise(
media_ingreso = mean(pred_ingreso)
)
encuesta_mrp %>%
group_by(dam) %>%
summarise(
media_ingreso = mean(ingreso)
)
media_est_srvyr
encuesta_mrp %>%
group_by(region) %>%
summarise(
media_ingreso = mean(ingreso)
)
rm(list = ls())
x <- c('tidyverse','xgboost','gridExtra','caTools')
lapply(x, require, character.only = TRUE)
rm(list = ls())
set.seed(1998)
options(scipen=999)
# Encuesta quitamos ingreso, lp, li y fep
encuesta_mrp <- readRDS("ingreso/datos/encuesta_mrp1.rds") %>%
select(
# -X2016_crops.coverfraction, -X2016_urban.coverfraction,
#      -X2016_gHM, -accessibility, -accessibility_walking_only,
-dam,-area1, -sexo2,-edad2,-edad3, -edad4,-edad5,-anoest2,
-anoest3, -anoest4, -discapacidad1,-etnia1,-lp,-li,-fep,-pobreza) %>%
mutate_if(is.character, as.factor)
summary(encuesta_mrp)
# Eta: Magnitud de las correciones que son hechas por cada predictor nuevo (learning rate)
# max depth: profundidad de los árboles
grid <- expand_grid(max_depth = seq(3, 15, 1),
lambda = seq(0, 10, 1),
lambda_bias = seq(0,10,1),
alpha = seq(0,10,1)
)
View(grid)
# Eta: Magnitud de las correciones que son hechas por cada predictor nuevo (learning rate)
# max depth: profundidad de los árboles
grid <- expand_grid(max_depth = seq(3, 15, 1),
lambda = seq(0, 5, 1),
lambda_bias = seq(0,5,1),
alpha = seq(0,5,1)
)
y = encuesta_mrp[,2]
encuesta_mrp_m <- xgb.DMatrix(data = as.matrix(sapply(encuesta_mrp[,-2], as.numeric)), label = as.matrix(sapply(y, as.numeric)))
xgb_train_rmse <- numeric(nrow(grid))
xgb_test_rmse <- numeric(nrow(grid))
for(i in 1:nrow(grid)){
xgb_untuned = xgb.cv(
data = encuesta_mrp_m,
params = list(
objective = "reg:squarederror",
lambda = grid$lambda[i],
lambda_bias = grid$lambda_bias[i],
alpha = grid$alpha[i],
max_depth = grid$max_depth[i]
),
nrounds = 1000,
early_stopping_rounds = 3, # training with a validation set will stop if the performance does not improve for k rounds (3)
nfold = 5
)
xgb_train_rmse[i] <-
xgb_untuned$evaluation_log$train_rmse_mean[xgb_untuned$best_iteration]
xgb_test_rmse[i] <-
xgb_untuned$evaluation_log$test_rmse_mean[xgb_untuned$best_iteration]
cat(i, "\n")
}
xgb_train_rmse <- xgb_train_rmse %>%
tibble() %>%
mutate(simulacion = seq(1:208))
xgb_train_rmse <- xgb_train_rmse %>%
tibble() %>%
mutate(simulacion = seq(1:2808))
xgb_test_rmse <- xgb_test_rmse %>%
tibble() %>%
mutate(simulacion = seq(1:2808))
saveRDS(xgb_train_rmse, file = "ingreso/output/xgb_train_rmse_all.rds")
saveRDS(xgb_test_rmse, file = "ingreso/output/xgb_train_rmse_all.rds")
grid[which.min(xgb_train_rmse$.), ]
rm(list = ls())
x <- c('tidyverse','xgboost','gridExtra','caTools','haven','data.table',
'Matrix')
lapply(x, require, character.only = TRUE)
rm(list = ls())
set.seed(1998)
options(scipen=999)
# Encuesta quitamos ingreso, lp, li y fep
encuesta_mrp <- data.table(readRDS("ingreso/datos/encuesta_mrp1.rds")) %>%
select(
# -X2016_crops.coverfraction, -X2016_urban.coverfraction,
#      -X2016_gHM, -accessibility, -accessibility_walking_only,
-dam,-area1, -sexo2,-edad2,-edad3, -edad4,-edad5,-anoest2,
-anoest3, -anoest4, -discapacidad1,-etnia1,-lp,-li,-fep,-pobreza) %>%
mutate_if(is.character, as.factor)
summary(encuesta_mrp)
head(encuesta_mrp)
str(encuesta_mrp)
# Debido a que el XGBoosting solo toma valores numericos, se debe hacer una pequeña transformación para hacerlo funcionar.
sparse_matrix <- sparse.model.matrix(ingreso ~ ., data = encuesta_mrp)[, -1]
y = encuesta_mrp[,2]
encuesta_mrp_m <- xgb.DMatrix(data = sparse_matrix,
label = as.matrix(sapply(y, as.numeric)))
grid <- expand_grid(
max_depth = seq(6, 10, 1),
lambda = seq(0, 5, 1),
lambda_bias = seq(0, 5, 1),
alpha = seq(0, 5, 1)
)
xgb_train_rmse <- numeric(nrow(grid))
xgb_test_rmse <- numeric(nrow(grid))
for(i in 1:nrow(grid)){
xgb_untuned = xgb.cv(
data = encuesta_mrp_m,
booster = "gblinear",
lambda = grid$lambda[i],
alpha = grid$alpha[i],
lambda_bias = grid$lambda_bias[i],
max_depth = grid$max_depth[i],
objective = "reg:squarederror",
eval_metric = "rmse",
nrounds = 1000,
early_stopping_rounds = 3, # training with a validation set will stop if the performance does not improve for k rounds (3)
nfold = 5
)
xgb_train_rmse[i] <-
xgb_untuned$evaluation_log$train_rmse_mean[xgb_untuned$best_iteration]
xgb_test_rmse[i] <-
xgb_untuned$evaluation_log$test_rmse_mean[xgb_untuned$best_iteration]
cat(i, "\n")
}
